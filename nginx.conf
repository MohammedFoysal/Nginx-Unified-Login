http {
    server {
        listen 80;

        server_name serviceone.hub.test;

        location / {
            # Proxy all calls through auth service, if a 200 is returned they can proceed to the serviceone
            # If a 401 occurs, they are prevented from going to the serviceone
            auth_request /auth_check;

            proxy_pass http://localhost:3001; 
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_intercept_errors on;

            # Redirect to auth service's login screen when a http 401 occurs
            error_page 401 = @redirect_to_auth;
        }

        location /auth_check {
            proxy_pass http://auth.hub.test;
            proxy_set_header    X-Forwarded-Host $host;
            proxy_set_header    X-Original-URL $scheme://$http_host$request_uri;

            # Set the auth token header from the cookie
            proxy_set_header Authorization "Bearer $cookie_auth_token";
        }

        location @redirect_to_auth {
            return 302 http://auth.hub.test/login;
        }
    }

    server {
        listen 80;

        server_name auth.hub.test;

        location / {
            proxy_pass http://localhost:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}